---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import { Image } from 'astro:assets';
import { generateCSRFToken } from '../lib/csrf';

const contactInfo = [
  {
    title: 'Localização',
    items: [
      'Diadema, SP',
      'Peabiru, PR',
      'Sao Paulo, SP'
    ]
  },
  {
    title: 'Contato Direto',
    items: [
      'Email: contato@favelahacker.com.br',
      'Instagram: @favelahacker'
    ]
  }
];

const socialLinks = [
  { name: 'GitHub', url: 'https://github.com/favelahacker' },
  { name: 'Twitter', url: 'https://twitter.com/favelahacker' },
  { name: 'LinkedIn', url: 'https://linkedin.com/company/favelahacker' },
  { name: 'Instagram', url: 'https://instagram.com/favelahacker' }
];

// Generate initial CSRF token
const csrfToken = await generateCSRFToken();
---

<Layout
  title="Contato - Favela Hacker"
  description="Entre em contato com a equipe do Favela Hacker"
>
  <div class="max-w-2xl mx-auto">
    <Image
      src="https://images.pexels.com/photos/3861972/pexels-photo-3861972.jpeg"
      alt="Contato Favela Hacker"
      width={800}
      height={400}
      class="w-full h-64 object-cover rounded-lg mb-8"
      loading="eager"
      decoding="sync"
    />
    
    <h1 class="text-3xl font-mono text-terminal-green mb-8">Entre em Contato</h1>
    
    <div class="grid md:grid-cols-2 gap-8 mb-12">
      {contactInfo.map(section => (
        <Card title={section.title}>
          {section.items.map(item => (
            <p class="mb-2">{item}</p>
          ))}
        </Card>
      ))}
    </div>

    <form id="contact-form" class="space-y-6" data-csrf-token={csrfToken}>
      <div>
        <label class="block text-terminal-green font-mono mb-2" for="name">
          Nome
        </label>
        <input
          type="text"
          id="name"
          name="name"
          required
          minlength="2"
          maxlength="100"
          class="form-input"
          placeholder="Seu nome"
          autocomplete="name"
        />
        <span class="text-red-500 text-sm hidden" data-error="name"></span>
      </div>

      <div>
        <label class="block text-terminal-green font-mono mb-2" for="email">
          Email
        </label>
        <input
          type="email"
          id="email"
          name="email"
          required
          maxlength="100"
          class="form-input"
          placeholder="seu@email.com"
          autocomplete="email"
        />
        <span class="text-red-500 text-sm hidden" data-error="email"></span>
      </div>

      <div>
        <label class="block text-terminal-green font-mono mb-2" for="subject">
          Assunto
        </label>
        <select id="subject" name="subject" required class="form-input">
          <option value="">Selecione um assunto</option>
          <option value="aluno">Quero ser aluno</option>
          <option value="mentor">Quero ser mentor</option>
          <option value="parceria">Proposta de parceria</option>
          <option value="outro">Outro assunto</option>
        </select>
        <span class="text-red-500 text-sm hidden" data-error="subject"></span>
      </div>

      <div>
        <label class="block text-terminal-green font-mono mb-2" for="message">
          Mensagem
        </label>
        <textarea
          id="message"
          name="message"
          required
          minlength="10"
          maxlength="1000"
          class="form-input form-textarea"
          placeholder="Sua mensagem"
        ></textarea>
        <span class="text-red-500 text-sm hidden" data-error="message"></span>
        <div class="text-sm text-terminal-green mt-1">
          <span id="message-length">0</span>/1000 caracteres
        </div>
      </div>

      <div id="form-error" class="text-red-500 hidden"></div>
      <div id="form-success" class="text-terminal-green hidden"></div>

      <div>
        <button type="submit" class="button" id="submit-button">
          Enviar Mensagem
        </button>
      </div>
    </form>

    <div class="mt-12">
      <h2 class="text-2xl font-mono text-terminal-green mb-6">Redes Sociais</h2>
      <div class="flex gap-6">
        {socialLinks.map(link => (
          <a 
            href={link.url} 
            target="_blank" 
            rel="noopener noreferrer"
            class="text-terminal-green hover:text-terminal-dark-green"
          >
            {link.name}
          </a>
        ))}
      </div>
    </div>
  </div>
</Layout>

<script>
const form = document.getElementById('contact-form') as HTMLFormElement;
const errorDiv = document.getElementById('form-error') as HTMLDivElement;
const successDiv = document.getElementById('form-success') as HTMLDivElement;
const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
const messageTextarea = document.getElementById('message') as HTMLTextAreaElement;
const messageLengthDisplay = document.getElementById('message-length') as HTMLSpanElement;

// Character counter
messageTextarea?.addEventListener('input', () => {
  const length = messageTextarea.value.length;
  if (messageLengthDisplay) {
    messageLengthDisplay.textContent = length.toString();
  }
  
  if (length > 1000) {
    messageTextarea.value = messageTextarea.value.slice(0, 1000);
    if (messageLengthDisplay) {
      messageLengthDisplay.textContent = '1000';
    }
  }
});

// Clear error message when user starts typing
form?.querySelectorAll('input, textarea, select').forEach(element => {
  element.addEventListener('input', () => {
    const errorSpan = form.querySelector(`[data-error="${element.id}"]`);
    if (errorSpan) {
      errorSpan.textContent = '';
      errorSpan.classList.add('hidden');
    }
    errorDiv.classList.add('hidden');
  });
});

form?.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  // Reset messages
  errorDiv.classList.add('hidden');
  successDiv.classList.add('hidden');
  form.querySelectorAll('[data-error]').forEach(el => {
    el.textContent = '';
    el.classList.add('hidden');
  });
  
  // Disable submit button
  submitButton.disabled = true;
  submitButton.textContent = 'Enviando...';
  
  try {
    const formData = new FormData(form);
    const data = {
      name: formData.get('name'),
      email: formData.get('email'),
      subject: formData.get('subject'),
      message: formData.get('message')
    };
    
    const response = await fetch('/api/contact', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': form.dataset.csrfToken || ''
      },
      body: JSON.stringify(data),
    });

    const result = await response.json();
    
    if (!response.ok || !result.success) {
      throw new Error(result.error || 'Erro ao enviar mensagem');
    }

    // Update CSRF token for next request
    if (result.csrfToken) {
      form.dataset.csrfToken = result.csrfToken;
    }
    
    // Redirect to success page
    window.location.href = '/contato/sucesso';
    
  } catch (error) {
    console.error('Form submission error:', error);
    let errorMessage = 'Erro ao enviar mensagem';
    
    if (error instanceof Error) {
      errorMessage = error.message;
    }
    
    // Display the error message
    errorDiv.textContent = errorMessage;
    errorDiv.classList.remove('hidden');
    
  } finally {
    // Re-enable submit button
    submitButton.disabled = false;
    submitButton.textContent = 'Enviar Mensagem';
  }
});
</script>